
import streamlit as st
import pickle
import faiss
from sentence_transformers import SentenceTransformer
from langchain.vectorstores import FAISS
from langchain.embeddings import HuggingFaceEmbeddings
import google.generativeai as genai
import json

# === CONFIGURAR P√ÅGINA ANTES DE NADA ===
st.set_page_config(page_title="üß† LegalSmart", layout="centered")

# === CARGAR ART√çCULOS COMPLETOS DESDE JSON ===
@st.cache_data
def load_articles():
    with open("ecuadorian_constitution_articles_multilabel.json", "r", encoding="utf-8") as f:
        return json.load(f)

full_articles = load_articles()


# === TRADUCCIONES UI ===
translations = {
    "Espa√±ol": {
        "title": "üß† Asistente Legal Constitucional üá™üá®",
        "prompt_input": "‚úçÔ∏è Escribe tu pregunta legal:",
        "domain_label": "Selecciona el dominio legal:",
        "level_label": "üó£Ô∏è Selecciona el nivel de comprensi√≥n lectora:",
        "answer_title": "### üßæ Respuesta:",
        "source_title": "### üìö Art√≠culos utilizados (completos):",
        "api_warning": "Por favor ingresa tu API key para comenzar.",
        "no_query": "Escribe una pregunta legal y selecciona el dominio para comenzar.",
        "consulting": "Consultando la Constituci√≥n...",
        "not_found": "‚ö†Ô∏è Art√≠culo no encontrado en el JSON.",
        "reading_levels": [
            "B√°sico (lenguaje sencillo)",
            "Intermedio (estilo ciudadano)",
            "Avanzado (t√©cnico jur√≠dico)"
        ]
    },
    "English": {
        "title": "üß† Constitutional Legal Assistant üá™üá®",
        "prompt_input": "‚úçÔ∏è Write your legal question:",
        "domain_label": "Select the legal domain:",
        "level_label": "üó£Ô∏è Select your reading level:",
        "answer_title": "### üßæ Answer:",
        "source_title": "### üìö Relevant articles used:",
        "api_warning": "Please enter your API key to continue.",
        "no_query": "Write a legal question and select a domain to start.",
        "consulting": "Consulting the Constitution...",
        "not_found": "‚ö†Ô∏è Article not found in the JSON.",
        "reading_levels": [
            "Basic (simple language)",
            "Intermediate (citizen style)",
            "Advanced (legal technical)"
        ]
    },
    "Kichwa": {
        "title": "üß† Shuk Yachachik Kamachikmanta üá™üá®",
        "prompt_input": "‚úçÔ∏è Kikinka √±awpa tapuyta willakichik:",
        "domain_label": "Kamachik mashi ruraykunata akllay:",
        "level_label": "üó£Ô∏è √ëawpakunapa yachay kallpata akllay:",
        "answer_title": "### üßæ Kutichi:",
        "source_title": "### üìö Ruraykunata apaykuna:",
        "api_warning": "API key-yki killkakushka kachunmi.",
        "no_query": "Tapuyta killkayki kachunmi, chaymanta kamachikta akllay.",
        "consulting": "Kamachikta maskachik...",
        "not_found": "‚ö†Ô∏è √ëawpakunapi ruray mana taripushkachu.",
        "reading_levels": [
            "Shutilla rimay (wawakunapa yachachina)",
            "Markapi runakunaman (suma yachachina)",
            "Hatun kamachik rimay (jur√≠dico t√©cnico)"
        ]
    }
}

# === SELECTOR DE IDIOMA ===
lang = st.selectbox("üåê Idioma / Language / Runashimi:", ["Espa√±ol", "English", "Kichwa"])
t = translations[lang]

# === T√çTULO ADAPTADO AL IDIOMA ===
st.title(t["title"])

# === INPUT CLAVE API ===
user_api_key = st.text_input("üîê API key de Gemini / Gemini API key:", type="password")

if user_api_key:
    try:
        genai.configure(api_key=user_api_key)
        model = genai.GenerativeModel("models/gemini-1.5-flash", generation_config={"temperature": 0.9})

        @st.cache_resource
        def load_vectorstore():
            embedding_model = HuggingFaceEmbeddings(model_name="intfloat/multilingual-e5-base")
            vectorstore = FAISS.load_local("constitution_vectorstore", embedding_model, allow_dangerous_deserialization=True)
            return vectorstore

        vectorstore = load_vectorstore()
        retriever = vectorstore.as_retriever(search_kwargs={"k": 3})


        def search_constitution(query, domain_filter=None):
            docs = retriever.get_relevant_documents(query)
            if domain_filter and domain_filter != "Todos":
                docs = [doc for doc in docs if domain_filter in doc.metadata.get("domains", [])]
            return docs

        def ask_constitution(query, domain_filter=None, reading_level="Intermedio (estilo ciudadano)"):
            relevant_docs = search_constitution(query, domain_filter)

            if not relevant_docs:
                return (
                    {
                        "Espa√±ol": "No se encontr√≥ informaci√≥n constitucional relevante para responder esta pregunta.",
                        "English": "No relevant constitutional information was found to answer this question.",
                        "Kichwa": "Kay tapuykunapa kutichina ruraykuna mana taripushka kachunmi."
                    }[lang],
                    []
                )

            context = "\n\n".join([
                f"Art√≠culo: {doc.metadata.get('article_number', 'N/A')}\nDominio: {', '.join(doc.metadata.get('domains', []))}\nContenido: {doc.page_content}"
                for doc in relevant_docs
            ])

            tone_instruction = {
                "B√°sico (lenguaje sencillo)": {
                    "Espa√±ol": "Responde como si hablaras con un estudiante de colegio. Usa palabras simples.",
                    "English": "Reply as if you're speaking to a high school student. Use simple words.",
                    "Kichwa": "Yachachik warmikunawan rimanakama kanki. Rimaykuna llakikuna kachun."
                },
                "Intermedio (estilo ciudadano)": {
                    "Espa√±ol": "Responde como si explicaras a un ciudadano com√∫n, claro y directo.",
                    "English": "Answer clearly as if explaining to an everyday citizen.",
                    "Kichwa": "Markapi runakunaman kikinka rimayta willakichik, kashkalla chay rimayta."
                },
                "Avanzado (t√©cnico jur√≠dico)": {
                    "Espa√±ol": "Responde con precisi√≥n jur√≠dica, usando lenguaje t√©cnico legal.",
                    "English": "Use legal terminology and accurate legal tone.",
                    "Kichwa": "Kamachik rimaykuna yuyaykuna chayka achka kashkan chaymanta."
                }
            }

            prompt = f"""
Eres un asistente legal entrenado en la Constituci√≥n del Ecuador.

{tone_instruction[reading_level][lang]}

Ejemplos:

PREGUNTA: ¬øQu√© derechos tienen los ni√±os en Ecuador?
RESPUESTA:
Seg√∫n el Art√≠culo 45 de la Constituci√≥n del Ecuador, los ni√±os, ni√±as y adolescentes tienen derecho a la integridad f√≠sica y ps√≠quica; a su identidad, nombre y ciudadan√≠a; a la salud integral y nutrici√≥n; a la educaci√≥n y cultura, al deporte y recreaci√≥n; a la seguridad social; a tener una familia y disfrutar de la convivencia familiar y comunitaria; a la participaci√≥n social; al respeto de su libertad y dignidad; y a ser consultados en los asuntos que les conciernen.

PREGUNTA: ¬øPuedo ser detenido sin orden judicial en Ecuador?
RESPUESTA:
El Art√≠culo 77 establece que ninguna persona puede ser privada de libertad sino por orden de juez competente, excepto en caso de flagrancia. Toda persona detenida debe ser informada inmediatamente de sus derechos y de los motivos de su detenci√≥n, y tiene derecho a comunicarse con su familia y abogado.

PREGUNTA: ¬øQu√© derechos tienen los pueblos ind√≠genas sobre sus territorios?
RESPUESTA:
El Art√≠culo 57 reconoce que los pueblos ind√≠genas tienen derecho a conservar la posesi√≥n ancestral de sus tierras y territorios, a no ser desplazados, y a participar en el uso, usufructo, administraci√≥n y conservaci√≥n de los recursos naturales renovables existentes en ellos. Adem√°s, deben ser consultados antes de cualquier medida legislativa o administrativa que pueda afectarles.

---

---

Ahora responde a esta nueva pregunta en {lang.lower()} con base en los siguientes extractos constitucionales:

{context}

PREGUNTA: {query}
"""

            response = model.generate_content(prompt)
            return response.text.strip(), relevant_docs

        selected_domain = st.selectbox(t["domain_label"], [
            "Todos", "Derechos Fundamentales", "Derecho Laboral", "Derecho Ambiental",
            "Negocios y Econom√≠a", "Justicia y Proceso Legal", "Otro / No Clasificado"
        ])
        query = st.text_area(t["prompt_input"])

        reading_level = st.selectbox(t["level_label"], t["reading_levels"])


        if st.button("Consultar") and query.strip():
            with st.spinner(t["consulting"]):
                answer, sources = ask_constitution(query, selected_domain, reading_level)
                st.markdown(t["answer_title"])
                st.write(answer)

                st.markdown(t["source_title"])
                used_articles = set()
                for doc in sources:
                    article_id = doc.metadata.get('article_number')
                    if article_id and article_id not in used_articles:
                        used_articles.add(article_id)
                        article = next((a for a in full_articles if a['article_number'] == article_id), None)
                        if article:
                            st.markdown(f"**Art√≠culo {article['article_number']}** ({', '.join(article['domains'])})")
                            st.write(article['text'])
                        else:
                            st.markdown(t["not_found"])
        else:
            st.info(t["no_query"])

    except Exception as e:
        st.error(f"‚ùå Error: {str(e)}")
else:
    st.warning(t["api_warning"])


